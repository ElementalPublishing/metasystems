{
  "system": "ecs",
  "description": "No metadata or docstring found.",
  "detected_inputs": [],
  "detected_outputs": [
    {
      "type": "console",
      "description": "Prints output to the terminal"
    }
  ],
  "source_code": "import json\nimport os\nfrom datetime import datetime\n\nclass Component:\n    pass\n\nclass DescriptionComponent(Component):\n    def __init__(self, description):\n        self.description = description\n\nclass InputComponent(Component):\n    def __init__(self, inputs):\n        self.inputs = inputs  # List of dicts\n\nclass OutputComponent(Component):\n    def __init__(self, outputs):\n        self.outputs = outputs  # List of dicts\n\nclass SourceCodeComponent(Component):\n    def __init__(self, source_code):\n        self.source_code = source_code\n\nclass TagComponent(Component):\n    def __init__(self, tags):\n        self.tags = tags  # List of strings\n\nclass DependencyComponent(Component):\n    def __init__(self, dependencies):\n        self.dependencies = dependencies  # List of system/entity names\n\nclass StatusComponent(Component):\n    def __init__(self, status=\"idle\"):\n        self.status = status\n\nclass ConfigComponent(Component):\n    def __init__(self, config):\n        self.config = config  # Dict of config options\n\nclass ResultComponent(Component):\n    def __init__(self, result):\n        self.result = result\n\nclass DocumentationComponent(Component):\n    def __init__(self, documentation):\n        self.documentation = documentation\n\nclass TimestampComponent(Component):\n    def __init__(self, created=None, last_run=None):\n        self.created = created or datetime.now().isoformat()\n        self.last_run = last_run\n\nclass AuthorComponent(Component):\n    def __init__(self, author):\n        self.author = author\n\n# Awesome & Unique Components\n\nclass VisualizationComponent(Component):\n    \"\"\"Holds visualization or UI hints for the entity.\"\"\"\n    def __init__(self, hints):\n        self.hints = hints  # Dict or list of visualization hints\n\nclass SecurityComponent(Component):\n    \"\"\"Tracks security or permission requirements.\"\"\"\n    def __init__(self, permissions):\n        self.permissions = permissions  # List of permissions or roles\n\nclass AnalyticsComponent(Component):\n    \"\"\"Tracks usage analytics or performance metrics.\"\"\"\n    def __init__(self, metrics):\n        self.metrics = metrics  # Dict of analytics data\n\nclass Entity:\n    def __init__(self, name):\n        self.name = name\n        self.components = {}\n\n    def add_component(self, component_type, component):\n        self.components[component_type] = component\n\n    def get_component(self, component_type):\n        return self.components.get(component_type)\n\nclass ECS:\n    def __init__(self):\n        self.entities = []\n\n    def load_from_json(self, json_path):\n        with open(json_path, \"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n        entity = Entity(data.get(\"system\", \"unknown\"))\n        entity.add_component(DescriptionComponent, DescriptionComponent(data.get(\"description\", \"\")))\n        entity.add_component(InputComponent, InputComponent(data.get(\"detected_inputs\", [])))\n        entity.add_component(OutputComponent, OutputComponent(data.get(\"detected_outputs\", [])))\n        entity.add_component(SourceCodeComponent, SourceCodeComponent(data.get(\"source_code\", \"\")))\n        # Add some demo/empty components for demonstration\n        entity.add_component(TagComponent, TagComponent(data.get(\"tags\", [])))\n        entity.add_component(DependencyComponent, DependencyComponent(data.get(\"dependencies\", [])))\n        entity.add_component(StatusComponent, StatusComponent(data.get(\"status\", \"idle\")))\n        entity.add_component(ConfigComponent, ConfigComponent(data.get(\"config\", {})))\n        entity.add_component(ResultComponent, ResultComponent(data.get(\"result\", None)))\n        entity.add_component(DocumentationComponent, DocumentationComponent(data.get(\"documentation\", \"\")))\n        entity.add_component(TimestampComponent, TimestampComponent(data.get(\"created\", None), data.get(\"last_run\", None)))\n        entity.add_component(AuthorComponent, AuthorComponent(data.get(\"author\", \"\")))\n        entity.add_component(VisualizationComponent, VisualizationComponent(data.get(\"visualization_hints\", {})))\n        entity.add_component(SecurityComponent, SecurityComponent(data.get(\"permissions\", [])))\n        entity.add_component(AnalyticsComponent, AnalyticsComponent(data.get(\"metrics\", {})))\n        self.entities.append(entity)\n        return entity\n\n    def find_entity(self, name):\n        for entity in self.entities:\n            if entity.name == name:\n                return entity\n        return None\n\n    def list_entities(self):\n        return [entity.name for entity in self.entities]\n\n# Example usage:\nif __name__ == \"__main__\":\n    ecs = ECS()\n    # Load all *_analysis.json files in the current directory\n    for fname in os.listdir(os.path.dirname(__file__)):\n        if fname.endswith(\"_analysis.json\"):\n            ecs.load_from_json(os.path.join(os.path.dirname(__file__), fname))\n    print(\"Loaded entities:\", ecs.list_entities())\n    # Print info for each entity\n    for entity in ecs.entities:\n        desc = entity.get_component(DescriptionComponent).description\n        print(f\"\\nEntity: {entity.name}\\nDescription: {desc}\")",
  "tags": [],
  "dependencies": [
    "json",
    "os",
    "datetime"
  ],
  "status": "idle",
  "config": {},
  "result": null,
  "documentation": "",
  "created": null,
  "last_run": null,
  "author": "",
  "visualization_hints": {},
  "permissions": [],
  "metrics": {}
}